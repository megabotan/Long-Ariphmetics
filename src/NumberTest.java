
import static org.junit.Assert.*;
import org.junit.Test;


public class NumberTest {

	@Test
	public void testAdd1() {
		Number test1=new Number("123");
		Number test2=new Number("321");
		assertEquals(test1.add(test2).toString(),"444");
	}
	@Test
	public void testAdd2() {
		Number test1=new Number("0");
		Number test2=new Number("0");
		assertEquals(test1.add(test2).toString(),"0");
	}
	@Test
	public void testAdd3() {
		Number test1=new Number("0");
		Number test2=new Number("A0F49B37BB563AAD87B6FA3004A00F2CFB3B5E51F9E45D8DCDC2DD33D0035778E1579EEBC1ED6AE63471CC618DDA9EDEB2FC3A9EC7685A527CC9E24366935C2A");
		assertEquals(test1.add(test2).toString(),"A0F49B37BB563AAD87B6FA3004A00F2CFB3B5E51F9E45D8DCDC2DD33D0035778E1579EEBC1ED6AE63471CC618DDA9EDEB2FC3A9EC7685A527CC9E24366935C2A".toLowerCase());
	}
	@Test
	public void testAdd4() {
		Number test1=new Number("A0F49B37BB563AAD87B6FA3004A00F2CFB3B5E51F9E45D8DCDC2DD33D0035778E1579EEBC1ED6AE63471CC618DDA9EDEB2FC3A9EC7685A527CC9E24366935C2A");
		Number test2=new Number("468B2FABFFD3796017BD80C544E42DBC461549D740DC4BC09196F43CE39F448EF2604CEA27F5A1662DB696193B42FA9A28095F59AE4D9B2F8A1128A7F74A9FD1");
		assertEquals(test1.add(test2).toString(),"E77FCAE3BB29B40D9F747AF549843CE94150A8293AC0A94E5F59D170B3A29C07D3B7EBD5E9E30C4C6228627AC91D9978DB0599F875B5F58206DB0AEB5DDDFBFB".toLowerCase());
	}
	@Test
	public void testSubtract1(){
		Number test1=new Number("A0F49B37BB563AAD87B6FA3004A00F2CFB3B5E51F9E45D8DCDC2DD33D0035778E1579EEBC1ED6AE63471CC618DDA9EDEB2FC3A9EC7685A527CC9E24366935C2A");
		Number test2=new Number("468B2FABFFD3796017BD80C544E42DBC461549D740DC4BC09196F43CE39F448EF2604CEA27F5A1662DB696193B42FA9A28095F59AE4D9B2F8A1128A7F74A9FD1");
		assertEquals(test1.subtract(test2).toString(),"5A696B8BBB82C14D6FF9796ABFBBE170B526147AB90811CD3C2BE8F6EC6412E9EEF7520199F7C98006BB36485297A4448AF2DB45191ABF22F2B8B99B6F48BC59".toLowerCase());
	}
	@Test
	public void testSubtract2(){
		Number test1=new Number("5C30AFDBE349B062C3195C2DF5148451C1A95FADA24FED3F02D1C6B87196240B05B4B25474D6A54B9E97CCACE99EFFBC3F9381EA199A5735289A9B4FED853142");
		Number test2=new Number("B35D4F492859CC81CE52D356D7C0CDD3FB1D0349E95FD04A078EB7915AB40EAAEADD905308F08695D100F788C93595928D38D5F329C5819E4859967DE65E79E7");
		assertEquals(test1.subtract(test2).toString(),"-572C9F6D45101C1F0B397728E2AC49823973A39C470FE30B04BCF0D8E91DEA9FE528DDFE9419E14A32692ADBDF9695D64DA55409102B2A691FBEFB2DF8D948A5".toLowerCase());
	}
	@Test
	public void testSubtract3(){
		Number test1=new Number("0");
		Number test2=new Number("0");
		
		assertEquals(test1.subtract(test2).toString(),"0".toLowerCase());
	}
	@Test
	public void testGetLength1(){
		Number test1=new Number("0");
		assertEquals(test1.getLength(),1);
	}
	@Test
	public void testGetLength2(){
		Number test1=new Number("2A5CE69074154161DD17894818DD04D2908802C453EC1C7673C68F252F6435148012F94DF00DD5CC12A6FD042BCAF879A44A4CC0E5FFB4936BE77EAC6316A48C");
		assertEquals(test1.getLength(),"2A5CE69074154161DD17894818DD04D2908802C453EC1C7673C68F252F6435148012F94DF00DD5CC12A6FD042BCAF879A44A4CC0E5FFB4936BE77EAC6316A48C".length());
	}
	@Test
	public void testGetData1()
	{
		Number test1=new Number("2A5CE69074154161DD17894818DD04D2908802C453EC1C7673C68F252F6435148012F94DF00DD5CC12A6FD042BCAF879A44A4CC0E5FFB4936BE77EAC6316A48C");
		assertEquals(test1.getData(10),(byte)14);
	}
	@Test
	public void testGetData2()
	{
		Number test1=new Number("2A5CE69074154161DD17894818DD04D2908802C453EC1C7673C68F252F6435148012F94DF00DD5CC12A6FD042BCAF879A44A4CC0E5FFB4936BE77EAC6316A48C");
		assertEquals(test1.getData(test1.getLength()-1),(byte)2);
	}
	@Test
	public void testNormalize1(){
		Number test1=new Number("00000000");
		test1.normalize();
		assertEquals(test1.toString(),"0");
	}
	@Test
	public void testNormalize2(){
		Number test1=new Number("000000002A5CE69074154161DD17894818DD04D2908802C453EC1C70");
		test1.normalize();
		assertEquals(test1.toString(),"2A5CE69074154161DD17894818DD04D2908802C453EC1C70".toLowerCase());
	}
	@Test
	public void testIsGreaterOrEqualThan1(){
		Number test1=new Number("2A5CE69074154161DD17894818DD04D2908802C453EC1C7673C68F252F6435148012F94DF00DD5CC12A6FD042BCAF879A44A4CC0E5FFB4936BE77EAC6316A48C");
		Number test2=new Number("2A5CE69074154161DD17894818DD04D2908802C453EC1C7673C68F252F6435148012F94DF00DD5CC12A6FD042BCAF879A44A4CC0E5FFB4936BE77EAC6316A48C");
		assertTrue(test1.isGreaterOrEqualThan(test2));
	}
	@Test
	public void testIsGreaterOrEqualThan2(){
		Number test1=new Number("2A5CE69074154161DD17894818DD04D2908802C453EC1C7673C68F252F6435148012F94DF00DD5CC12A6FD042BCAF879A44A4CC0E5FFB4936BE77EAC6316A48C");
		Number test2=new Number("2A5CE69074154161DD17894818DD04D2908802C453EC1C8673C68F252F6435148012F94DF00DD5CC12A6FD042BCAF879A44A4CC0E5FFB4936BE77EAC6316A48C");
		assertFalse(test1.isGreaterOrEqualThan(test2));
	}
	@Test
	public void testIsGreaterOrEqualThan3(){
		Number test1=new Number("0");
		Number test2=new Number("1");
		assertFalse(test1.isGreaterOrEqualThan(test2));
	}
	@Test 
	public void testMoveLeft1(){
		Number test1=new Number("2A5CE69074154161DD17894818DD04D2908802C453EC1C70");
		assertEquals(test1.moveLeft(10).toString(),"2A5CE69074154161DD17894818DD04D2908802C453EC1C700000000000".toLowerCase());
	}
	@Test 
	public void testMoveLeft2(){
		Number test1=new Number("0");
		test1.moveLeft(10);
		assertEquals(test1.toString(),"0".toLowerCase());
	}
	@Test 
	public void testMoveLeft3(){
		Number test1=new Number("1");
		assertEquals(test1.moveLeft(10).toString(),"10000000000".toLowerCase());
	}
	@Test 
	public void testMoveRight1(){
		Number test1=new Number("2A5CE69074154161DD17894818DD04D2908802C453EC1C70");
		assertEquals(test1.moveRight(10).toString(),"2A5CE69074154161DD17894818DD04D2908802".toLowerCase());
	}
	@Test
	public void testMultiplyBite1(){
		Number test1=new Number("2A5CE69074154161DD17894818DD04D2908802C453EC1C7673C68F252F6435148012F94DF00DD5CC12A6FD042BCAF879A44A4CC0E5FFB4936BE77EAC6316A48C");
		assertEquals(test1.multiplyBite((byte)7).toString(),"1288A4DF32C94C9AD0BA4C0F8AE0B21C1F3B8135E4B74C73D2A6DEA044BBD738F8084D1219060D8948290EB1D328CCB537E08194649FDF007F35476B6B59E7FD4".toLowerCase());
	}
	@Test
	public void testMultiplyBite2(){
		Number test1=new Number("2A5CE69074154161DD17894818DD04D2908802C453EC1C7673C68F252F6435148012F94DF00DD5CC12A6FD042BCAF879A44A4CC0E5FFB4936BE77EAC6316A48C");
		assertEquals(test1.multiplyBite((byte)0).toString(),"0".toLowerCase());
	}
	@Test
	public void testMultiply1()
	{
		Number test1=new Number("696A08BCE7CD8EA960E6D24B510344998C94D3505D15CA2DDD34872E940A67A12982AD44E4B7A08ED78F188DBE9509A526B234F866A482827F9A0D14F2902D9B");
		Number test2=new Number("43E7D1DF4A35737A3C8475235AF97CB4590D2B0B4832A6D1BFAF11F1D319CE68475215F17550AAF32A34FC59FF54861437B8EF707672885147BBA83F9CA6928C");
		assertEquals(test1.Multiply(test2).toString(),"1BF63562D62E75A62E383AE16DB9BB39EEB8540198B5A84D9CDF29F9A9511D518799E7779F0E7D5FC47E7B01D008937C3C9DC5BA73782D4368C9DC1088EACFAABC14EC4430F156865A31846A33B9E3A81C14AE30DB1756040DC48D79CC29AB7E32773209EC845A2F6409BD26A44C8BF0C205882010B753597FBC3037E75D56C4".toLowerCase());
	}
	@Test
	public void testMultiply2()
	{
		Number test1=new Number("696A08BCE7CD8EA960E6D24B510344998C94D3505D15CA2DDD34872E940A67A12982AD44E4B7A08ED78F188DBE9509A526B234F866A482827F9A0D14F2902D9B");
		Number test2=new Number("0");
		assertEquals(test1.Multiply(test2).toString(),"0".toLowerCase());
	}
	@Test
	public void testMultiply3()
	{
		Number test1=new Number("696A08BCE7CD8EA960E6D24B510344998C94D3505D15CA2DDD34872E940A67A12982AD44E4B7A08ED78F188DBE9509A526B234F866A482827F9A0D14F2902D9B");
		Number test2=new Number("1");
		assertEquals(test1.Multiply(test2).toString(),"696A08BCE7CD8EA960E6D24B510344998C94D3505D15CA2DDD34872E940A67A12982AD44E4B7A08ED78F188DBE9509A526B234F866A482827F9A0D14F2902D9B".toLowerCase());
	}
	@Test
	public void testMultiply4()
	{
		Number test1=new Number("1");
		Number test2=new Number("696A08BCE7CD8EA960E6D24B510344998C94D3505D15CA2DDD34872E940A67A12982AD44E4B7A08ED78F188DBE9509A526B234F866A482827F9A0D14F2902D9B");
		assertEquals(test1.Multiply(test2).toString(),"696A08BCE7CD8EA960E6D24B510344998C94D3505D15CA2DDD34872E940A67A12982AD44E4B7A08ED78F188DBE9509A526B234F866A482827F9A0D14F2902D9B".toLowerCase());
	}
	@Test
	public void testDivide1(){
		Number test1=new Number("10097D14F1485142DA755E38589B22456F6BB0DD42D7B924FCDCB79E85DB26B0B2B6CA15EED17507A87C62C80FDFC68868654F2314935F9F6FBA8DB461443F9549503E55ECF7B175DC3EB1B75B33C6AB3EF57C7DC3E1337D77782EB171124912E9371919073CF5BA2CB68C5753571B27CB4ECE3F4CB0B494380EE84C775F73CC");
		Number test2=new Number("36780D430A604B2670D4388FB368B4CE6CFB71FCDE06C853277745F3639EE09870404F25E7AB3403E0F3ACB381BBDC0DB567A2DA45FE554C39C06BCB70A6D896");
		assertEquals(test1.Divide(test2).toString(),"4B5F7D3BFA21F70F6F2285FC51ECDA089E9C03BAF81297D7D7BAE37E1EAEB9C2A3B1D946617F2FEFAF815895F1F26DB1E57A46B34575309ECBDFFDAAADAB31F2".toLowerCase());
	}
	@Test
	public void testDivide2(){
		Number test1=new Number("10097D14F1485142DA755E38589B22456F6BB0DD42D7B924FCDCB79E85DB26B0B2B6CA15EED17507A87C62C80FDFC68868654F2314935F9F6FBA8DB461443F9549503E55ECF7B175DC3EB1B75B33C6AB3EF57C7DC3E1337D77782EB171124912E9371919073CF5BA2CB68C5753571B27CB4ECE3F4CB0B494380EE84C775F73CC");
		Number test2=new Number("1");
		assertEquals(test1.Divide(test2).toString(),"10097D14F1485142DA755E38589B22456F6BB0DD42D7B924FCDCB79E85DB26B0B2B6CA15EED17507A87C62C80FDFC68868654F2314935F9F6FBA8DB461443F9549503E55ECF7B175DC3EB1B75B33C6AB3EF57C7DC3E1337D77782EB171124912E9371919073CF5BA2CB68C5753571B27CB4ECE3F4CB0B494380EE84C775F73CC".toLowerCase());
	}
	@Test
	public void testRemainderClassic1(){
		Number test1=new Number("E8B4E1BB70DAC1B164E1C59448825EAFF59B4D6D86BD7239315F236566C2AF4599B013697F665C5E24A68D99A47AD5DCC6B20E2327AED5BE2D04F3BAB5CE239B");
		Number test2=new Number("8C8472DAB5B3492B7DB3154DC896B6D547970E11810DB8FFC2A619B7C6C93");
		assertEquals(test1.RemainderClassic(test2).toString(),"452FE0D8A3D3B32959EADFEA5EA6ACC945A9FCF5F182B382EA6099F5EE4D9".toLowerCase());
	}
	@Test
	public void testRemainderClassic2(){
		Number test1=new Number("E8B4E1BB70DAC1B164E1C59448825EAFF59B4D6D86BD7239315F236566C2AF4599B013697F665C5E24A68D99A47AD5DCC6B20E2327AED5BE2D04F3BAB5CE239B");
		Number test2=new Number("1");
		assertEquals(test1.RemainderClassic(test2).toString(),"0".toLowerCase());
	}
	@Test
	public void testRemainderBarret1(){
		Number test1=new Number("DE8C76F788E78FB597C90F811911AFB2BB54676ED7A6733A9E7C7B7C8EE27640");
		Number test2=new Number("F8957B38366F762D1C7D6F1AC17CAE60E90EF52C955C6");
		assertEquals(test1.RemainderBarett(test2).toString(),"E2CEF00CD2434160B64A95BBB5149CE3FBC087918DB74".toLowerCase());
	}
	@Test
	public void testRemainderBarret2(){
		Number test1=new Number("E8B4E1BDE8C76F788E78FB597C90F811911AFB2BB54676ED7A6733A9E7C7B7C8EE27640DE8C76F788E78FB597C90F811911AFB2BB54676ED7A6733A9E7C7B7C8EE27640");
		Number test2=new Number("1");
		assertEquals(test1.RemainderBarett(test2).toString(),"0".toLowerCase());
	}
	@Test
	public void testMultiplyModul1()
	{
		Number test1=new Number("3875C514C810F1B596C0FB63BAAF1BF2B73946A5EB4D27078C843CFCD821C9C4");
		Number test2=new Number("1E59D2AD3BFED7AF8693381EDE126F00E0AC29B5792A0A2F4A82B63F0E99026");
		Number test3=new Number("A2B73D516984C2EA79DE0C93EE84CD0B35D900A04F87A7F597987042CAB7BB1D");
		assertEquals(test1.MultiplyModul(test2,test3).toString(),"AFED492282D7D16CA813F61F73C2A75EE4887F4170FCF5D7CFE3FAC494EBB54".toLowerCase());
	}
	@Test
	public void testSquareModul()
	{
		Number test1=new Number("80273870FBF653D75314578250F44F44D31A1362E6273B1450E6BA7E3FD41313");
		Number test2=new Number("7CBBB5805FC69E9E57DBD8B034E9D6ABF0F69FDD17DB56F4AC3E9D91DC538CFB");
		assertEquals(test1.SquareModul(test2).toString(),"7C115C9D8DF27E9BD71023A68DB9D02F6AF954D69B308A932DD4244B58B1F788".toLowerCase());
	}
	@Test
	public void testPowerModul()
	{
		Number test1=new Number("D669830C714F");
		Number test2=new Number("C61F763014B8");
		Number test3=new Number("CFDDED5C3C65");
		assertEquals(test1.PowerModul(test2,test3).toString(),"23EE890D0366".toLowerCase());	
		
	}
	@Test
	public void testPowerModul1()
	{
		Number test1=new Number("D669830C714FD669830C714F");
		Number test2=new Number("C61F763014B8D669830C714F");
		Number test3=new Number("CFDDED5C3C65CFDDED5C3C65");
		assertEquals(test1.PowerModul(test2,test3).toString(),"191D7F1D6F60191D7F1D6F6".toLowerCase());	
		
	}
	
	@Test
	public void testMultiplyKaratsuba()
	{
		Number test1=new Number("696A08BCE7CD8EA960E6D24B510344998C94D3505D15CA2DDD34872E940A67A12982AD44E4B7A08ED78F188DBE9509A526B234F866A482827F9A0D14F2902D9B");
		Number test2=new Number("43E7D1DF4A35737A3C8475235AF97CB4590D2B0B4832A6D1BFAF11F1D319CE68475215F17550AAF32A34FC59FF54861437B8EF707672885147BBA83F9CA6928C");
		assertEquals(test1.MultiplyKaratsuba(test2).toString(),"1BF63562D62E75A62E383AE16DB9BB39EEB8540198B5A84D9CDF29F9A9511D518799E7779F0E7D5FC47E7B01D008937C3C9DC5BA73782D4368C9DC1088EACFAABC14EC4430F156865A31846A33B9E3A81C14AE30DB1756040DC48D79CC29AB7E32773209EC845A2F6409BD26A44C8BF0C205882010B753597FBC3037E75D56C4".toLowerCase());	
		
	}
}
